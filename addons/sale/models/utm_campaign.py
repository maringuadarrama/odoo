from odoo import fields, models
from odoo.tools import SQL


class UtmCampaign(models.Model):
    """Extends the 'utm.campaign' model to include sales-related metrics and actions.

    This module adds fields to track the number of quotations and invoiced amounts generated by a campaign.
    It also provides actions to redirect to quotations and invoices associated with the campaign, enabling
    better tracking and analysis of campaign performance."""

    _inherit = "utm.campaign"
    _description = "UTM Campaign"

    # ------------------------------------------------------------
    # FIELDS
    # ------------------------------------------------------------

    company_id = fields.Many2one(
        comodel_name="res.company",
        string="Company",
        default=lambda self: self.env.company,
    )
    currency_id = fields.Many2one(
        related="company_id.currency_id",
        comodel_name="res.currency",
        string="Currency",
    )
    count_quotation = fields.Integer(
        string="Quotation Count",
        compute="_compute_count_quotation",
        compute_sudo=True,
        groups="sales_team.group_sale_salesman",
    )
    amount_invoiced_taxexc = fields.Integer(
        string="Revenues generated by the campaign",
        compute="_compute_sale_amount_invoiced",
        compute_sudo=True,
        groups="sales_team.group_sale_salesman",
    )

    # ------------------------------------------------------------
    # COMPUTE METHODS
    # ------------------------------------------------------------

    def _compute_count_quotation(self):
        quotation_data = self.env["sale.order"]._read_group(
            [("campaign_id", "in", self.ids)], ["campaign_id"], ["__count"]
        )
        data_map = {campaign.id: count for campaign, count in quotation_data}
        for campaign in self:
            campaign.count_quotation = data_map.get(campaign.id, 0)

    def _compute_sale_amount_invoiced(self):
        if self.ids:
            self.env["account.move.line"].flush_model(
                ["balance", "move_id", "account_id", "display_type"]
            )
            self.env["account.move"].flush_model(["state", "campaign_id", "move_type"])
            query_res = self.env.execute_query_dict(
                SQL(
                    """
                    SELECT
                        move.campaign_id, -SUM(line.balance) as price_subtotal
                    FROM
                        account_move_line line
                    INNER JOIN account_move move ON line.move_id = move.id
                    WHERE
                        move.state not in ('draft', 'cancel')
                        AND move.campaign_id IN %s
                        AND move.move_type IN ('out_invoice', 'out_refund', 'in_invoice', 'in_refund', 'out_receipt', 'in_receipt')
                        AND line.account_id IS NOT NULL
                        AND line.display_type = 'product'
                    GROUP BY
                        move.campaign_id
                    """,
                    tuple(self.ids),
                )
            )
        else:
            query_res = []

        campaigns = self.browse()
        for datum in query_res:
            campaign = self.browse(datum["campaign_id"])
            campaign.amount_invoiced_taxexc = datum["price_subtotal"]
            campaigns |= campaign
        for campaign in self - campaigns:
            campaign.amount_invoiced_taxexc = 0

    # ------------------------------------------------------------
    # ACTION METHODS
    # ------------------------------------------------------------

    def action_redirect_to_quotations(self):
        action = self.env["ir.actions.actions"]._for_xml_id(
            "sale.action_quotations_with_onboarding"
        )
        action["domain"] = [("campaign_id", "=", self.id)]
        action["context"] = {"default_campaign_id": self.id}
        return action

    def action_redirect_to_invoiced(self):
        action = self.env["ir.actions.actions"]._for_xml_id(
            "account.action_move_journal_line"
        )
        invoices = self.env["account.move"].search([("campaign_id", "=", self.id)])
        action["context"] = {"create": False, "edit": False, "view_no_maturity": True}
        action["domain"] = [
            ("id", "in", invoices.ids),
            (
                "move_type",
                "in",
                (
                    "out_invoice",
                    "out_refund",
                    "in_invoice",
                    "in_refund",
                    "out_receipt",
                    "in_receipt",
                ),
            ),
            ("state", "not in", ["draft", "cancel"]),
        ]
        return action
